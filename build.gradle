buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url = 'https://maven.parchmentmc.org' }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1+', changing: true
        classpath 'org.parchmentmc:librarian:1.+'
        classpath "gradle.plugin.org.cadixdev.gradle:licenser:0.6.+"
    }
}

plugins {
    id "com.modrinth.minotaur" version "2.+"
    id 'com.matthewprenger.cursegradle' version '1.4.0'
    id 'eclipse'
    id 'maven-publish'
    id "org.cadixdev.licenser" version "0.6.1"
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'

version = "${mc_version}-${mod_version}"
group = 'com.silverminer.shrines'

java {
    archivesBaseName = 'Shrines'
    toolchain.languageVersion = JavaLanguageVersion.of(17)
}

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

license {
    header = project.file('HEADER.txt')
    properties {
        name = 'Silverminer007'
        year = 2022
    }
}

minecraft {
    mappings channel: 'parchment', version: "${parchment_version}-${mc_version}"
    //mappings channel: 'official', version: "${mc_version}"

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            mods {
                shrines {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                shrines {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            args '--mod', 'shrines', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                shrines {
                    source sourceSets.main
                }
            }
        }
    }
}

modrinth {
    if (System.getenv("SHRINES_RELEASE_TYPE") != null) {
        versionType = System.getenv("SHRINES_RELEASE_TYPE")
    } else {
        versionType = 'beta'
    }
    token = System.getenv("MODRINTH")
    // An environment property called MODRINTH that is your token, set via Gradle CLI, GitHub Actions, Idea Run Configuration, or other
    projectId = 'F33t24Wi'
    versionNumber = "$project.version"
    versionName = "$project.archivesBaseName-$project.version"
    uploadFile = jar
    def file = file('changelog.md')
    def changelogFile = file.text
    changelog = changelogFile.substring(0, changelogFile.contains('===') ? changelogFile.indexOf("===") : changelogFile.length())
    gameVersions = ["1.18.2"]
}

curseforge {
    project {
        apiKey = System.getenv('CURSEFORGE')
        id = '418915'
        //changelog = file('changelog.md')
        def file = file('changelog.md')
        def changelogFile = file.text
        changelog = changelogFile.substring(0, changelogFile.contains('===') ? changelogFile.indexOf("===") : changelogFile.length())
        changelogType = 'markdown'
        if (System.getenv("SHRINES_RELEASE_TYPE") != null) {
            releaseType = System.getenv("SHRINES_RELEASE_TYPE")
        } else {
            releaseType = 'beta'
        }
        addGameVersion '1.18.2'
        addGameVersion 'Forge'
    }
    options {
        detectNewerJava = true // defaults to false
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"
}

//sourceSets.main.resources { srcDir 'src/generated/resources' }

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
                "Specification-Title"     : "shrines",
                "Specification-Vendor"    : "Silverm7ner",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : "${version}",
                "Implementation-Vendor"   : "Silverm7ner",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}
jar.finalizedBy('reobfJar')
publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}